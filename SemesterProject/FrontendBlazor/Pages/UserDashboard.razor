@page "/UserDashboard"
@inject LaundryRoomService LaundryRoomService
@inject AuthStateService AuthState
@inject BookingService BookingService
@using FrontendBlazor.Components
@using FrontendBlazor.Model.DTOs


<h1 class="text-4xl font-bold text-center mt-6">User Dashboard</h1>


<div>

<!-- Centered Date Selector -->
<div class="flex justify-center items-center mt-10">
    <DateSelector SelectedDate="@selectedDate" SelectedDateChanged="OnDateSelected" />
</div>


    <!-- Available Machines -->
    <div class="mt-10">
        <AvailableMachines Machines="@LaundryRoomService.ComplexSettings.LaundryMachines"
                           OnMachineSelected="HandleMachineSelected"
                           TriggerFlash="@triggerFlashForMachines" />
    </div>

<!-- TimeSlots here -->
    <div class="flex flex-col items-center mt-10 space-y-6 w-full">
        
        @if (LaundryRoomService.TimeSlotsFromSettings?.Any() == true)
        {
            @foreach (var timeslot in FilterTimeSlotsForSelectedDate())
            {
                <div class="w-3/5">
                    <TimeSlot
                        Apartment="@GetApartmentForTimeslot(timeslot.TimeslotId)"
                        StartTime="@timeslot.StartTime.ToString(@"hh\:mm")"
                        EndTime="@timeslot.EndTime.ToString(@"hh\:mm")"
                        IsAvailable="@IsTimeslotAvailable(timeslot.TimeslotId)"
                        SelectedDate="@selectedDate"
                        TimeSlotId="@timeslot.TimeslotId"
                        AllowShowUserInfo="@LaundryRoomService.ComplexSettings.AllowShowUserInfo"
                        BookSelectedTimeSlot="OnBookSelectedTimeSlot" />
                </div>
            }
        } else
        {
        <div class="text-gray-500 text-center mt-4">No timeslots available for the selected date.</div>
        }
    </div>
</div>


@code {
    private DateTime selectedDate = DateTime.Today;
    private string? errorMessage;
    private LaundryMachineDto selectedMachine;
    private bool triggerFlashForMachines = false;



    private async Task<bool> OnBookSelectedTimeSlot(int TimeSlotId)
    {
        
        if (selectedMachine == null)
        {
            Console.WriteLine("Error: No machine selected for booking.");
            triggerFlashForMachines = true;
            await Task.Delay(100); 
            triggerFlashForMachines = false;
            return false;
        }
        
        
        Console.WriteLine($"UserDashboard - Booked Time Slot: {TimeSlotId}");

        var userId = AuthState.CurrentUser.Id;
        var BookingDate = selectedDate;
        var timeslotId = TimeSlotId;
        var laundryroomId = LaundryRoomService.AccessibleRooms.FirstOrDefault().LaundryRoomId;
        var machineId = selectedMachine.MachineId;
        

        try
        {
            BookingDto CreatedBooking = await BookingService.CreateBooking(userId,machineId,BookingDate.ToString(),timeslotId,laundryroomId);
            Console.WriteLine("Created Booking: " + CreatedBooking.BookingId + " at: " + CreatedBooking.BookingDate + ", " + CreatedBooking.StartTime);
            
            // Add the new booking to the state
            LaundryRoomService.BookingsForLaundryRoom.Add(CreatedBooking);

            // Ensure the parent component is aware of the change
            await InvokeAsync(StateHasChanged);

            return true;

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
        
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await SetStateDataForUserDashboard();
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Error initializing User Dashboard: {ex}");
        }
    }

   

    private void OnDateSelected(DateTime date)
    {
        selectedDate = date;
        Console.WriteLine($"Selected Date in user dashboard: {selectedDate}");
    }
    
    
    private void FetchBookings()
    {
    }

    private async Task SetStateDataForUserDashboard()
    {


        try
        {
            await LaundryRoomService.SetAccessibleRooms(AuthState.CurrentUser.Id);
           // Console.WriteLine("User dashboard loaded. State is set.. User: " + AuthState.CurrentUser.UserName + ", rooms: " + LaundryRoomService.AccessibleRooms.FirstOrDefault().LaundryRoomId);
            
            
            await LaundryRoomService.SetTimeSlots(LaundryRoomService.AccessibleRooms.FirstOrDefault().LaundryRoomId);
            //Console.WriteLine("Timeslots set: " + LaundryRoomService.TimeSlotsFromSettings.FirstOrDefault().StartTime);


            await LaundryRoomService.SetSettingsForLaundryRoom(LaundryRoomService.AccessibleRooms.FirstOrDefault().LaundryRoomId);


            await LaundryRoomService.SetBookingsForLaundryRoom(LaundryRoomService.AccessibleRooms.FirstOrDefault().LaundryRoomId);
            Console.WriteLine("bookings fetched in dashboard set: " + LaundryRoomService.BookingsForLaundryRoom.FirstOrDefault().BookingDate);


        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

    }
    
    private IEnumerable<TimeSlotDto> FilterTimeSlotsForSelectedDate()
    { 
        return LaundryRoomService.TimeSlotsFromSettings
            //.Where(ts => ts.StartTime.TotalMinutes >= selectedDate.Date.TimeOfDay.TotalMinutes) // Example filter
            .OrderBy(ts => ts.StartTime); // Ensure sorting is applied
    }    
    private string GetApartmentForTimeslot(int timeslotId)
    {
        
        if (!LaundryRoomService.ComplexSettings.AllowShowUserInfo)
        {
            return "Unavailable"; // Hide the apartment information
        }
        
        return LaundryRoomService.BookingsForLaundryRoom
            .FirstOrDefault(b => b.TimeSlotId == timeslotId)?.Apartment ?? "apartment not available";
    }
    private bool IsTimeslotAvailable(int timeslotId)
    {
        var isAvailable = !LaundryRoomService.BookingsForLaundryRoom.Any(b =>
            b.TimeSlotId == timeslotId && b.BookingDate.Date == selectedDate.Date);
        return isAvailable;

    }
    
    private void HandleMachineSelected(LaundryMachineDto machine)
    {
        selectedMachine = machine;
        Console.WriteLine($"Selected Machine: {machine.MachineName} (ID: {machine.MachineId})");
    }
}
